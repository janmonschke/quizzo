generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Host {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String        @unique
  passwordHash String
  Quizzes      Quiz[]
  QuizSessions QuizSession[]
}

model Quiz {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  host         Host          @relation(fields: [hostId], references: [id], onDelete: Cascade)
  hostId       String
  name         String
  description  String?
  Questions    Question[]
  QuizSessions QuizSession[]
}

model Question {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  quiz          Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId        String
  // string value of QuestionType
  type          String
  questionText  String
  // Multiple answers are separated by a double pipe ||
  answerOptions String?
  // The actual answer
  answer        String
  position      Float
  points        Float
  Answer        Answer[]
}

model QuizSession {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  quiz            Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId          String
  host            Host     @relation(fields: [hostId], references: [id], onDelete: Cascade)
  hostId          String
  currentPosition Int      @default(0)
  Answers         Answer[]
  Teams           Team[]
}

model Team {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quizSession   QuizSession @relation(fields: [quizSessionId], references: [id], onDelete: Cascade)
  quizSessionId String

  name String

  // nice to have
  // Team members are separated by a double pipe ||
  members       String
  Answers       Answer[]
  AwardedPoints AwardedPoints[]
}

model Answer {
  id            String          @id @default(uuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  quizSession   QuizSession     @relation(fields: [quizSessionId], references: [id], onDelete: Cascade)
  quizSessionId String
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId    String
  team          Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId        String
  answer        String
  AwardedPoints AwardedPoints[]
}

model AwardedPoints {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId  String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  points    Float
}
